#load necessary libraries
library(ggplot2)
library(plotly)
library(phyr)
library(ape)

set.seed(42)


# ------------------------------
# Simulation Parameters
# ------------------------------
n_communities <- 5
n_invaders <- 5  # Number of invader species per community

# Simulate environmental values for each community
community_env <- runif(n_communities, min = 0, max = 5)
community_names <- paste0("Community", 1:n_communities)
names(community_env) <- community_names

# Simulate propagule pressure for each invader-community pair
set.seed(123)
PP_values <- matrix(rlnorm(n_communities * n_invaders, meanlog = 2, sdlog = 0.5),
                    nrow = n_communities, ncol = n_invaders)
colnames(PP_values) <- paste0("inv", 1:n_invaders)
rownames(PP_values) <- community_names

# For simplicity, assume d_f and d_p for each invader are drawn randomly
set.seed(456)
invader_d_f <- runif(n_invaders, min = 0, max = 10)
invader_d_p <- runif(n_invaders, min = 0, max = 10)

# ------------------------------
# Define Global Parameters for the Model
# ------------------------------
# Overall scaling function A(E) = A0 + A1 * E
A0 <- 1
A1 <- 0.1

# Functional component:
d_f0 <- 5.0      # Baseline optimal functional distance when E = 0
d_f1 <- 0.5      # Change per unit E for functional optimum
beta_f0 <- 0.5   # Baseline steepness for functional performance
beta_f1 <- 0.1   # Change per unit E for functional steepness

# Phylogenetic component:
d_p0 <- 4.0      # Baseline optimal phylogenetic distance when E = 0
d_p1 <- -0.3     # Change per unit E for phylogenetic optimum
beta_p0 <- 0.3   # Baseline steepness for phylogenetic performance
beta_p1 <- 0.05  # Change per unit E for phylogenetic steepness

# Interaction parameter
lambda <- 0.2

# Sigmoidal threshold for functional differentiation:
alpha_f <- 10    # Controls the steepness of the sigmoidal function
d_f_max <- 3     # Threshold distance for functional differentiation

# Competition index C(E); here we assume a fixed value for demonstration
C_E_fixed <- 2

# ------------------------------
# Simulate Invasion Success Across Communities
# ------------------------------
sim_results <- data.frame()

for(comm in community_names){
  E <- community_env[comm]
  
  # Environment-dependent parameters:
  A_E <- A0 + A1 * E
  d_f_star_E <- d_f0 + d_f1 * E
  beta_f_E <- beta_f0 + beta_f1 * E
  d_p_star_E <- d_p0 + d_p1 * E
  beta_p_E <- beta_p0 + beta_p1 * E
  
  # Use fixed competition index for demonstration (C(E) can be estimated from field data)
  C_E <- C_E_fixed
  
  for(inv in 1:n_invaders){
    PP <- PP_values[comm, inv]
    d_f_val <- invader_d_f[inv]
    d_p_val <- invader_d_p[inv]
    
    # Compute the trait mismatch penalties using Gaussian functions
    exp_term <- exp(
      - beta_f_E * (d_f_val - d_f_star_E)^2 -
        beta_p_E * (d_p_val - d_p_star_E)^2 -
        lambda * (d_f_val - d_f_star_E) * (d_p_val - d_p_star_E)
    )
    
    # Compute the propagule pressure effect moderated by competition
    PP_effect <- PP / (1 + C_E)
    
    # Compute the sigmoidal threshold on functional differentiation
    threshold_effect <- 1 / (1 + exp(alpha_f * (abs(d_f_val - d_f_star_E) - d_f_max)))
    
    # Calculate overall invasion success S
    S_val <- A_E * exp_term * PP_effect * threshold_effect
    
    sim_results <- rbind(sim_results, data.frame(
      community = comm,
      invader = paste0("inv", inv),
      E = E,
      d_f = d_f_val,
      d_p = d_p_val,
      PP = PP,
      invasiveness = S_val
    ))
  }
}

print(sim_results)

# ------------------------------
# Visualize Simulated Community Results
# ------------------------------
# Plot invasion success vs. functional distance by community
ggplot(sim_results, aes(x = d_f, y = invasiveness, color = invader)) +
  geom_point(size = 3) +
  facet_wrap(~ community, ncol = 2) +
  labs(title = "Simulated Invasion Success vs. Functional Distance",
       x = "Functional Distance (d_f)",
       y = "Invasion Success (S)") +
  theme_classic()

# Plot invasion success vs. phylogenetic distance by community
ggplot(sim_results, aes(x = d_p, y = invasiveness, color = invader)) +
  geom_point(size = 3) +
  facet_wrap(~ community, ncol = 2) +
  labs(title = "Simulated Invasion Success vs. Phylogenetic Distance",
       x = "Phylogenetic Distance (d_p)",
       y = "Invasion Success (S)") +
  theme_classic()

# Create a 3D interactive surface plot for one community, e.g., Community1.
# Generate grid values for d_f and d_p in Community1 for visualization:
comm_selected <- "Community1"
E_comm <- community_env[comm_selected]
A_comm <- A0 + A1 * E_comm
d_f_star_comm <- d_f0 + d_f1 * E_comm
beta_f_comm <- beta_f0 + beta_f1 * E_comm
d_p_star_comm <- d_p0 + d_p1 * E_comm
beta_p_comm <- beta_p0 + beta_p1 * E_comm

# Use fixed competition for visualization
C_comm <- C_E_fixed

d_f_grid <- seq(min(sim_results$d_f)-1, max(sim_results$d_f)+1, length.out = 100)
d_p_grid <- seq(min(sim_results$d_p)-1, max(sim_results$d_p)+1, length.out = 100)
grid_comm <- expand.grid(d_f = d_f_grid, d_p = d_p_grid)

# Use average PP for Community1 (or choose a representative value)
PP_comm <- mean(PP_values[comm_selected, ])

grid_comm$S <- A_comm * exp(
  - beta_f_comm * (grid_comm$d_f - d_f_star_comm)^2 -
    beta_p_comm * (grid_comm$d_p - d_p_star_comm)^2 -
    lambda * (grid_comm$d_f - d_f_star_comm) * (grid_comm$d_p - d_p_star_comm)
) * ( PP_comm / (1 + C_comm) ) * ( 1 / (1 + exp(alpha_f * (abs(grid_comm$d_f - d_f_star_comm) - d_f_max))) )

# 3D Surface Plot using plotly
S_matrix <- matrix(grid_comm$S, nrow = length(d_p_grid), ncol = length(d_f_grid), byrow = TRUE)
surface_plot <- plot_ly(x = ~d_f_grid, y = ~d_p_grid, z = ~S_matrix) %>%
  add_surface(colorscale = "Viridis") %>%
  layout(title = paste("3D Surface of Invasion Success in", comm_selected, "(E =", round(E_comm,2), ", PP =", round(PP_comm,2), ")"),
         scene = list(
           xaxis = list(title = "Functional Distance (d_f)"),
           yaxis = list(title = "Phylogenetic Distance (d_p)"),
           zaxis = list(title = "Invasion Success (S)")
         ))
surface_plot


# Convert invasiveness to a binary response for the PGLMM:
# For example, 1 if invasiveness is above the median, else 0.
sim_results$invasion_success <- ifelse(sim_results$invasiveness > median(sim_results$invasiveness, na.rm = TRUE), 1, 0)

# Convert 'invader' and 'community' to factors
sim_results$invader <- factor(sim_results$invader)
sim_results$community <- factor(sim_results$community)

# Inspect the distribution of the binary response
table(sim_results$invasion_success)

set.seed(123)
sim_results$d_f <- sim_results$d_f + rnorm(nrow(sim_results), mean = 0, sd = 0.01)
sim_results$d_p <- sim_results$d_p + rnorm(nrow(sim_results), mean = 0, sd = 0.01)


# ------------------------------
# Generate or Load a Phylogenetic Tree for Invaders
# ------------------------------
# Here, we simulate a phylogenetic tree for the invader species present in sim_results.
invader_names <- levels(sim_results$invader)
invader_tree <- rtree(n = length(invader_names))
invader_tree$tip.label <- invader_names

# Calculate the phylogenetic covariance matrix from the invader tree,
# using a correlation matrix (so that values are standardized)
phylo_cov <- vcv(invader_tree, corr = TRUE)

# ------------------------------
# Fit a PGLMM Using the phyr Package
# ------------------------------
# We model the binary invasion success as a function of functional distance (d_f),
# phylogenetic distance (d_p), environmental value (E), propagule pressure (PP),
# and an interaction term (d_f:d_p). We include random intercepts for community and invader.
# The invader random effect uses the phylogenetic covariance matrix.
# pglmm_model <- brm(
#   invasion_success ~ d_f + d_p + E + PP + (1 | community) + (1 | invader__),
#   data = sim_results,
#   cov_ranef = list(invader = phylo_cov),
#   family = "binomial",
#   REML = FALSE,
#   calc.DIC = TRUE,
#   calc.WAIC = TRUE,
#   s2.init = 0.05
# )
# 
# # Display the summary of the model
# summary(pglmm_model)
# didn't work, I am going to use a bayesian model instead.

library(brms)
bayesian_model <- brm(
  invasion_success ~ d_f + d_p + E + PP + (1 | community) + (1 | invader),
  data = sim_results,
  family = bernoulli(),
  prior = set_prior("normal(0, 5)", class = "b"),
  iter = 4000,
  warmup = 1000,
  chains = 4,
  cores = 4
)
summary(bayesian_model)


# ------------------------------
# Visualize Model Predictions
# ------------------------------
# visualize the effect of d_f on the probability of high invasion success:
pred_data <- ggeffects::ggpredict(bayesian_model, terms = "d_f")
ggplot(pred_data, aes(x = x, y = predicted)) +
  geom_line() +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  labs(x = "Functional Distance (d_f)", y = "Predicted Probability of Invasion Success",
       title = "Effect of Functional Distance on Invasion Success") +
  theme_classic()


# visualize the effect of d_p on the probability of high invasion success:
pred_data1 <- ggeffects::ggpredict(bayesian_model, terms = "d_p")
ggplot(pred_data1, aes(x = x, y = predicted)) +
  geom_line() +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  labs(x = "Phylogenetic Distance (d_p)", y = "Predicted Probability of Invasion Success",
       title = "Effect of Phylogenetic Distance on Invasion Success") +
  theme_classic()
